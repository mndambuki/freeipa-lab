---
- name: Get information for the user {{ ipa_user.name }}
  ipa_user:
    name: "{{ ipa_user.name }}"
    ipa_host: localhost
    ipa_user: "{{ ipaadmin_principal | default(omit) }}"
    ipa_pass: "{{ ipaadmin_password | mandatory }}"
    validate_certs: no
    state: present
  register: ipa_user_info
  when:
    - not ipa_user_exists.failed

- name: Generate a password for the user {{ ipa_user.name }}
  set_fact:
    ipa_user_password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters') }}"
    ipa_user_password_expiration: "1990-01-01 00:00:00" # The password is expired on creation
  when:
    - ipa_user_exists.failed

- name: Create the user {{ ipa_user.name }}
  ipauser:
    ipaadmin_principal: "{{ ipaadmin_principal | default(omit) }}"
    ipaadmin_password: "{{ ipaadmin_password | mandatory }}"
    name: "{{ ipa_user.name | mandatory }}"
    first: "{{ ipa_user.first | mandatory }}"
    last: "{{ ipa_user.last | mandatory }}"
    password: "{{ ipa_user_password | default(omit) }}"
    passwordexpiration: "{{ ipa_user_password_expiration | default(omit) }}"
    update_password: on_create
    userauthtype: password
    shell: "{{ ipa_user.shell | default(omit) }}"
    sshpubkey: "{{ ipa_user.sshpubkey | default([]) }}"
    email: "{{ ipa_user.email | default(omit) }}"
    phone: "{{ ipa_user.phone | default(omit) }}"
    employeetype: "{{ ipa_user.employeetype | default(omit) }}"
    employeenumber: "{{ ipa_user.employeenumber | default(omit) }}"
    departmentnumber: "{{ ipa_user.departmentnumber | default(omit) }}"
    orgunit: "{{ ipa_user.orgunit | default(omit) }}"
    #manager: "{{ ipa_user.manager | default(omit) }}"
    city: "{{ ipa_user.city | default(omit) }}"
    postalcode: "{{ ipa_user.postalcode | default(omit) }}"
    preferredlanguage: "{{ ipa_user.preferredlanguage | default('en') }}"
  register: ipa_user_handler

- name: Manage groups for the user {{ ipa_user.name }}
  block:
    - name: Get groups current state for the user {{ ipa_user.name }}
      set_fact:
        ipa_user_groups_now: "{{ ipa_user_info.user.memberof_group | default([]) }}"
        ipa_user_groups_desired: "{{ (ipa_user.groups | default([])) + [ 'ipausers' ] }}" # TODO: Get default group from config

    - name: Print current groups for the user {{ ipa_user.name }}
      debug:
        msg:
          - The user belongs to groups {{ ipa_user_groups_now }}
          - The user will belong to groups {{ ipa_user_groups_desired }}
        verbosity: 1

    - name: Get groups drift for the user {{ ipa_user.name }}
      set_fact:
        ipa_user_groups_to_add: "{{ ipa_user_groups_desired | difference(ipa_user_groups_now) }}"
        ipa_user_groups_to_del: "{{ ipa_user_groups_now | difference(ipa_user_groups_desired) }}"

    - name: Add user {{ ipa_user.name }} to new groups
      include_tasks: add_user_to_group.yml
      loop:
        "{{ ipa_user_groups_to_add | default([]) }}"
      loop_control:
        loop_var: ipa_user_group

    - name: Delete user {{ ipa_user.name }} from old groups
      include_tasks: delete_user_from_group.yml
      loop:
        "{{ ipa_user_groups_to_del | default([]) }}"
      loop_control:
        loop_var: ipa_user_group

- name: Manage roles for the user {{ ipa_user.name }}
  block:
    - name: Get roles current state for the user {{ ipa_user.name }}
      set_fact:
        ipa_user_roles_now: "{{ ipa_user_info.user.memberof_role | default([]) }}"
        ipa_user_roles_desired: "{{ ipa_user.roles | default([]) }}"

    - name: Print current roles for the user {{ ipa_user.name }}
      debug:
        msg:
          - The user owns the roles {{ ipa_user_roles_now }}
          - The user will own the roles {{ ipa_user_roles_desired }}
        verbosity: 1

    - name: Get roles drift for the user {{ ipa_user.name }}
      set_fact:
        ipa_user_roles_to_add: "{{ ipa_user_roles_desired | difference(ipa_user_roles_now) }}"
        ipa_user_roles_to_del: "{{ ipa_user_roles_now | difference(ipa_user_roles_desired) }}"

    - name: Add new roles to the user {{ ipa_user.name }}
      include_tasks: add_role_to_user.yml
      loop:
        "{{ ipa_user_roles_to_add | default([]) }}"
      loop_control:
        loop_var: ipa_user_role

    - name: Delete old roles from the user {{ ipa_user.name }}
      include_tasks: delete_role_from_user.yml
      loop:
        "{{ ipa_user_roles_to_del | default([]) }}"
      loop_control:
        loop_var: ipa_user_role

- name: Force password unexpiration for the user {{ ipa_user.name }}
  block:
    - name: Generate a new password for the user {{ ipa_user.name }}
      set_fact:
        ipa_user_password: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters') }}"

    - name: Set the new password for the user {{ ipa_user.name }}
      ipauser:
        ipaadmin_principal: "{{ ipaadmin_principal | default(omit) }}"
        ipaadmin_password: "{{ ipaadmin_password | mandatory }}"
        name: "{{ ipa_user.name | mandatory }}"
        password: "{{ ipa_user_password | default(omit) }}"
  when:
    - ipa_user_exists.failed
    - ipa_user.expirepassword is defined
    - not ipa_user.expirepassword

- name: Retrieve the password to the user {{ ipa_user.name }}
  become: no
  delegate_to: localhost
  block:
    - name: Save the password for the user {{ ipa_user.name }} into a file
      include_tasks: send_password_to_file.yml
      when:
        - ipa_user_password_to_file is defined
        - ipa_user_password_to_file

    - name: Save the password for the user {{ ipa_user.name }} into password manager
      include_tasks: send_password_to_pass.yml
      when:
        - ipa_user_password_to_pass is defined
        - ipa_user_password_to_pass
  when:
    - ipa_user_exists.failed
